{"ast":null,"code":"/**\n * marked v6.0.0 - a markdown parser\n * Copyright (c) 2011-2023, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\nvar __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n// src/defaults.ts\nfunction _getDefaults() {\n  return {\n    async: false,\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: \"\",\n    highlight: null,\n    hooks: null,\n    langPrefix: \"language-\",\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\nvar _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n  _defaults = newDefaults;\n}\n\n// src/helpers.ts\nvar escapeTest = /[&<>\"']/;\nvar escapeReplace = new RegExp(escapeTest.source, \"g\");\nvar escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nvar escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, \"g\");\nvar escapeReplacements = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\",\n  \"'\": \"&#39;\"\n};\nvar getEscapeReplacement = ch => escapeReplacements[ch];\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n  return html;\n}\nvar unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nfunction unescape(html) {\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === \"colon\") return \":\";\n    if (n.charAt(0) === \"#\") {\n      return n.charAt(1) === \"x\" ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));\n    }\n    return \"\";\n  });\n}\nvar caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n  regex = typeof regex === \"string\" ? regex : regex.source;\n  opt = opt || \"\";\n  const obj = {\n    replace: (name, val) => {\n      val = typeof val === \"object\" && \"source\" in val ? val.source : val;\n      val = val.replace(caret, \"$1\");\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\nvar nonWordAndColonTest = /[^\\w:]/g;\nvar originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n    try {\n      prot = decodeURIComponent(unescape(href)).replace(nonWordAndColonTest, \"\").toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf(\"javascript:\") === 0 || prot.indexOf(\"vbscript:\") === 0 || prot.indexOf(\"data:\") === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, \"%\");\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\nvar baseUrls = {};\nvar justDomain = /^[^:]+:\\/*[^/]*$/;\nvar protocol = /^([^:]+:)[\\s\\S]*$/;\nvar domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\nfunction resolveUrl(base, href) {\n  if (!baseUrls[\" \" + base]) {\n    if (justDomain.test(base)) {\n      baseUrls[\" \" + base] = base + \"/\";\n    } else {\n      baseUrls[\" \" + base] = rtrim(base, \"/\", true);\n    }\n  }\n  base = baseUrls[\" \" + base];\n  const relativeBase = base.indexOf(\":\") === -1;\n  if (href.substring(0, 2) === \"//\") {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, \"$1\") + href;\n  } else if (href.charAt(0) === \"/\") {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, \"$1\") + href;\n  } else {\n    return base + href;\n  }\n}\nvar noopTest = {\n  exec: () => null\n};\nfunction splitCells(tableRow, count) {\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n      let escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === \"\\\\\") escaped = !escaped;\n      if (escaped) {\n        return \"|\";\n      } else {\n        return \" |\";\n      }\n    }),\n    cells = row.split(/ \\|/);\n  let i = 0;\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n    cells.pop();\n  }\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push(\"\");\n  }\n  for (; i < cells.length; i++) {\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, \"|\");\n  }\n  return cells;\n}\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return \"\";\n  }\n  let suffLen = 0;\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n  return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  const l = str.length;\n  let level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === \"\\\\\") {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\nfunction checkDeprecations(opt, callback) {\n  if (!opt || opt.silent) {\n    return;\n  }\n  if (callback) {\n    console.warn(\"marked(): callback is deprecated since version 5.0.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/using_pro#async\");\n  }\n  if (opt.sanitize || opt.sanitizer) {\n    console.warn(\"marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options\");\n  }\n  if (opt.highlight || opt.langPrefix !== \"language-\") {\n    console.warn(\"marked(): highlight and langPrefix parameters are deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-highlight.\");\n  }\n  if (opt.mangle) {\n    console.warn(\"marked(): mangle parameter is enabled by default, but is deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install https://www.npmjs.com/package/marked-mangle, or disable by setting `{mangle: false}`.\");\n  }\n  if (opt.baseUrl) {\n    console.warn(\"marked(): baseUrl parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-base-url.\");\n  }\n  if (opt.smartypants) {\n    console.warn(\"marked(): smartypants parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-smartypants.\");\n  }\n  if (opt.xhtml) {\n    console.warn(\"marked(): xhtml parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-xhtml.\");\n  }\n  if (opt.headerIds || opt.headerPrefix) {\n    console.warn(\"marked(): headerIds and headerPrefix parameters enabled by default, but are deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install  https://www.npmjs.com/package/marked-gfm-heading-id, or disable by setting `{headerIds: false}`.\");\n  }\n}\n\n// src/Tokenizer.ts\nfunction outputLink(cap, link, raw, lexer2) {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, \"$1\");\n  if (cap[0].charAt(0) !== \"!\") {\n    lexer2.state.inLink = true;\n    const token = {\n      type: \"link\",\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer2.inlineTokens(text)\n    };\n    lexer2.state.inLink = false;\n    return token;\n  }\n  return {\n    type: \"image\",\n    raw,\n    href,\n    title,\n    text: escape(text)\n  };\n}\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n  if (matchIndentToCode === null) {\n    return text;\n  }\n  const indentToCode = matchIndentToCode[1];\n  return text.split(\"\\n\").map(node => {\n    const matchIndentInNode = node.match(/^\\s+/);\n    if (matchIndentInNode === null) {\n      return node;\n    }\n    const [indentInNode] = matchIndentInNode;\n    if (indentInNode.length >= indentToCode.length) {\n      return node.slice(indentToCode.length);\n    }\n    return node;\n  }).join(\"\\n\");\n}\nvar _Tokenizer = class {\n  constructor(options2) {\n    this.options = options2 || _defaults;\n  }\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: \"space\",\n        raw: cap[0]\n      };\n    }\n  }\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, \"\");\n      return {\n        type: \"code\",\n        raw: cap[0],\n        codeBlockStyle: \"indented\",\n        text: !this.options.pedantic ? rtrim(text, \"\\n\") : text\n      };\n    }\n  }\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || \"\");\n      return {\n        type: \"code\",\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, \"$1\") : cap[2],\n        text\n      };\n    }\n  }\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, \"#\");\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          text = trimmed.trim();\n        }\n      }\n      return {\n        type: \"heading\",\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: \"hr\",\n        raw: cap[0]\n      };\n    }\n  }\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ *>[ \\t]?/gm, \"\");\n      const top = this.lexer.state.top;\n      this.lexer.state.top = true;\n      const tokens = this.lexer.blockTokens(text);\n      this.lexer.state.top = top;\n      return {\n        type: \"blockquote\",\n        raw: cap[0],\n        tokens,\n        text\n      };\n    }\n  }\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine, line, nextLine, rawLine, itemContents, endEarly;\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n      const list = {\n        type: \"list\",\n        raw: \"\",\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : \"\",\n        loose: false,\n        items: []\n      };\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n      if (this.options.pedantic) {\n        bull = isordered ? bull : \"[*+-]\";\n      }\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\t ][^\\\\n]*)?(?:\\\\n|$))`);\n      while (src) {\n        endEarly = false;\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n        if (this.rules.block.hr.test(src)) {\n          break;\n        }\n        raw = cap[0];\n        src = src.substring(raw.length);\n        line = cap[2].split(\"\\n\", 1)[0].replace(/^\\t+/, t => \" \".repeat(3 * t.length));\n        nextLine = src.split(\"\\n\", 1)[0];\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/);\n          indent = indent > 4 ? 1 : indent;\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n        blankLine = false;\n        if (!line && /^ *$/.test(nextLine)) {\n          raw += nextLine + \"\\n\";\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \t][^\\\\n]*)?(?:\\\\n|$))`);\n          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n          while (src) {\n            rawLine = src.split(\"\\n\", 1)[0];\n            nextLine = rawLine;\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, \"  \");\n            }\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n            if (hrRegex.test(src)) {\n              break;\n            }\n            if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) {\n              itemContents += \"\\n\" + nextLine.slice(indent);\n            } else {\n              if (blankLine) {\n                break;\n              }\n              if (line.search(/[^ ]/) >= 4) {\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n              itemContents += \"\\n\" + nextLine;\n            }\n            if (!blankLine && !nextLine.trim()) {\n              blankLine = true;\n            }\n            raw += rawLine + \"\\n\";\n            src = src.substring(rawLine.length + 1);\n            line = nextLine.slice(indent);\n          }\n        }\n        if (!list.loose) {\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== \"[ ] \";\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, \"\");\n          }\n        }\n        list.items.push({\n          type: \"list_item\",\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n        list.raw += raw;\n      }\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      list.items[list.items.length - 1].text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n      const l = list.items.length;\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n        if (!list.loose) {\n          const spacers = list.items[i].tokens.filter(t => t.type === \"space\");\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n          list.loose = hasMultipleLineBreaks;\n        }\n      }\n      if (list.loose) {\n        for (i = 0; i < l; i++) {\n          list.items[i].loose = true;\n        }\n      }\n      return list;\n    }\n  }\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token = {\n        type: \"html\",\n        block: true,\n        raw: cap[0],\n        pre: !this.options.sanitizer && (cap[1] === \"pre\" || cap[1] === \"script\" || cap[1] === \"style\"),\n        text: cap[0]\n      };\n      if (this.options.sanitize) {\n        const text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        const paragraph = token;\n        paragraph.type = \"paragraph\";\n        paragraph.text = text;\n        paragraph.tokens = this.lexer.inline(text);\n      }\n      return token;\n    }\n  }\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, \" \");\n      const href = cap[2] ? cap[2].replace(/^<(.*)>$/, \"$1\").replace(this.rules.inline._escapes, \"$1\") : \"\";\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, \"$1\") : cap[3];\n      return {\n        type: \"def\",\n        tag,\n        raw: cap[0],\n        href,\n        title\n      };\n    }\n  }\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n    if (cap) {\n      const item = {\n        type: \"table\",\n        // splitCells expects a number as second argument\n        // @ts-expect-error\n        header: splitCells(cap[1]).map(c => {\n          return {\n            text: c\n          };\n        }),\n        align: cap[2].replace(/^ *|\\| *$/g, \"\").split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, \"\").split(\"\\n\") : []\n      };\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n        let l = item.align.length;\n        let i, j, k, row;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = \"right\";\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = \"center\";\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = \"left\";\n          } else {\n            item.align[i] = null;\n          }\n        }\n        l = item.rows.length;\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => {\n            return {\n              text: c\n            };\n          });\n        }\n        l = item.header.length;\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = this.lexer.inline(item.header[j].text);\n        }\n        l = item.rows.length;\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = this.lexer.inline(row[k].text);\n          }\n        }\n        return item;\n      }\n    }\n  }\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: \"heading\",\n        raw: cap[0],\n        depth: cap[2].charAt(0) === \"=\" ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1])\n      };\n    }\n  }\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === \"\\n\" ? cap[1].slice(0, -1) : cap[1];\n      return {\n        type: \"paragraph\",\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: \"text\",\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0])\n      };\n    }\n  }\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: \"escape\",\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n      return {\n        type: this.options.sanitize ? \"text\" : \"html\",\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        block: false,\n        text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0]\n      };\n    }\n  }\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        if (!/>$/.test(trimmedUrl)) {\n          return;\n        }\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), \"\\\\\");\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        const lastParenIndex = findClosingBracket(cap[2], \"()\");\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf(\"!\") === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = \"\";\n        }\n      }\n      let href = cap[2];\n      let title = \"\";\n      if (this.options.pedantic) {\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : \"\";\n      }\n      href = href.trim();\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !/>$/.test(trimmedUrl)) {\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, \"$1\") : href,\n        title: title ? title.replace(this.rules.inline._escapes, \"$1\") : title\n      }, cap[0], this.lexer);\n    }\n  }\n  reflink(src, links) {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, \" \");\n      link = links[link.toLowerCase()];\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: \"text\",\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n  emStrong(src, maskedSrc, prevChar = \"\") {\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return;\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n    const nextChar = match[1] || match[2] || \"\";\n    if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n      const lLength = match[0].length - 1;\n      let rDelim,\n        rLength,\n        delimTotal = lLength,\n        midDelimTotal = 0;\n      const endReg = match[0][0] === \"*\" ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0;\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n        if (!rDelim) continue;\n        rLength = rDelim.length;\n        if (match[3] || match[4]) {\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) {\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue;\n          }\n        }\n        delimTotal -= rLength;\n        if (delimTotal > 0) continue;\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n        const raw = src.slice(0, lLength + match.index + rLength + 1);\n        if (Math.min(lLength, rLength) % 2) {\n          const text2 = raw.slice(1, -1);\n          return {\n            type: \"em\",\n            raw,\n            text: text2,\n            tokens: this.lexer.inlineTokens(text2)\n          };\n        }\n        const text = raw.slice(2, -2);\n        return {\n          type: \"strong\",\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text)\n        };\n      }\n    }\n  }\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, \" \");\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape(text, true);\n      return {\n        type: \"codespan\",\n        raw: cap[0],\n        text\n      };\n    }\n  }\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: \"br\",\n        raw: cap[0]\n      };\n    }\n  }\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: \"del\",\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2])\n      };\n    }\n  }\n  autolink(src, mangle2) {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === \"@\") {\n        text = escape(this.options.mangle ? mangle2(cap[1]) : cap[1]);\n        href = \"mailto:\" + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n      return {\n        type: \"link\",\n        raw: cap[0],\n        text,\n        href,\n        tokens: [{\n          type: \"text\",\n          raw: text,\n          text\n        }]\n      };\n    }\n  }\n  url(src, mangle2) {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === \"@\") {\n        text = escape(this.options.mangle ? mangle2(cap[0]) : cap[0]);\n        href = \"mailto:\" + text;\n      } else {\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === \"www.\") {\n          href = \"http://\" + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: \"link\",\n        raw: cap[0],\n        text,\n        href,\n        tokens: [{\n          type: \"text\",\n          raw: text,\n          text\n        }]\n      };\n    }\n  }\n  inlineText(src, smartypants2) {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      let text;\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants2(cap[0]) : cap[0]);\n      }\n      return {\n        type: \"text\",\n        raw: cap[0],\n        text\n      };\n    }\n  }\n};\n\n// src/rules.ts\nvar block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: \"^ {0,3}(?:<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)|comment[^\\\\n]*(\\\\n+|$)|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$))\",\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^((?:(?!^bull ).|\\n(?!\\n|bull ))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def).replace(\"label\", block._label).replace(\"title\", block._title).getRegex();\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */).replace(\"bull\", block.bullet).getRegex();\nblock.list = edit(block.list).replace(/bull/g, block.bullet).replace(\"hr\", \"\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))\").replace(\"def\", \"\\\\n+(?=\" + block.def.source + \")\").getRegex();\nblock._tag = \"address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul\";\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, \"i\").replace(\"comment\", block._comment).replace(\"tag\", block._tag).replace(\"attribute\", / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex();\nblock.lheading = edit(block.lheading).replace(/bull/g, block.bullet).getRegex();\nblock.paragraph = edit(block._paragraph).replace(\"hr\", block.hr).replace(\"heading\", \" {0,3}#{1,6} \").replace(\"|lheading\", \"\").replace(\"|table\", \"\").replace(\"blockquote\", \" {0,3}>\").replace(\"fences\", \" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\", \" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\", \"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\", block._tag).getRegex();\nblock.blockquote = edit(block.blockquote).replace(\"paragraph\", block.paragraph).getRegex();\nblock.normal = {\n  ...block\n};\nblock.gfm = {\n  ...block.normal,\n  table: \"^ *([^\\\\n ].*\\\\|.*)\\\\n {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)\"\n  // Cells\n};\nblock.gfm.table = edit(block.gfm.table).replace(\"hr\", block.hr).replace(\"heading\", \" {0,3}#{1,6} \").replace(\"blockquote\", \" {0,3}>\").replace(\"code\", \" {4}[^\\\\n]\").replace(\"fences\", \" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\", \" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\", \"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\", block._tag).getRegex();\nblock.gfm.paragraph = edit(block._paragraph).replace(\"hr\", block.hr).replace(\"heading\", \" {0,3}#{1,6} \").replace(\"|lheading\", \"\").replace(\"table\", block.gfm.table).replace(\"blockquote\", \" {0,3}>\").replace(\"fences\", \" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\", \" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\", \"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\", block._tag).getRegex();\nblock.pedantic = {\n  ...block.normal,\n  html: edit(`^ *(?:comment *(?:\\\\n|\\\\s*$)|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\\\s[^'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))`).replace(\"comment\", block._comment).replace(/tag/g, \"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b\").getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest,\n  // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(block.normal._paragraph).replace(\"hr\", block.hr).replace(\"heading\", \" *#{1,6} *[^\\n]\").replace(\"lheading\", block.lheading).replace(\"blockquote\", \" {0,3}>\").replace(\"|fences\", \"\").replace(\"|list\", \"\").replace(\"|html\", \"\").getRegex()\n};\nvar inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: \"^comment|^</[a-zA-Z][\\\\w:-]*\\\\s*>|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>|^<\\\\?[\\\\s\\\\S]*?\\\\?>|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\",\n  // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: \"reflink|nolink(?!\\\\()\",\n  emStrong: {\n    lDelim: /^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/,\n    //         (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //         | Skip orphan inside strong      | Consume to delim | (1) #***              | (2) a***#, a***                    | (3) #***a, ***a                  | (4) ***#                 | (5) #***#                         | (6) a***a\n    rDelimAst: /^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)[punct](\\*+)(?=[\\s]|$)|[^punct\\s](\\*+)(?!\\*)(?=[punct\\s]|$)|(?!\\*)[punct\\s](\\*+)(?=[^punct\\s])|[\\s](\\*+)(?!\\*)(?=[punct])|(?!\\*)[punct](\\*+)(?!\\*)(?=[punct])|[^punct\\s](\\*+)(?=[^punct\\s])/,\n    rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\\s]|$)|[^punct\\s](_+)(?!_)(?=[punct\\s]|$)|(?!_)[punct\\s](_+)(?=[^punct\\s])|[\\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])/\n    // ^- Not allowed for _\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^((?![*_])[\\spunctuation])/\n};\ninline._punctuation = \"\\\\p{P}$+<=>`^|~\";\ninline.punctuation = edit(inline.punctuation, \"u\").replace(/punctuation/g, inline._punctuation).getRegex();\ninline.blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\ninline.anyPunctuation = /\\\\[punct]/g;\ninline._escapes = /\\\\([punct])/g;\ninline._comment = edit(block._comment).replace(\"(?:-->|$)\", \"-->\").getRegex();\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim, \"u\").replace(/punct/g, inline._punctuation).getRegex();\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, \"gu\").replace(/punct/g, inline._punctuation).getRegex();\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, \"gu\").replace(/punct/g, inline._punctuation).getRegex();\ninline.anyPunctuation = edit(inline.anyPunctuation, \"gu\").replace(/punct/g, inline._punctuation).getRegex();\ninline._escapes = edit(inline._escapes, \"gu\").replace(/punct/g, inline._punctuation).getRegex();\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink).replace(\"scheme\", inline._scheme).replace(\"email\", inline._email).getRegex();\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\ninline.tag = edit(inline.tag).replace(\"comment\", inline._comment).replace(\"attribute\", inline._attribute).getRegex();\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\ninline.link = edit(inline.link).replace(\"label\", inline._label).replace(\"href\", inline._href).replace(\"title\", inline._title).getRegex();\ninline.reflink = edit(inline.reflink).replace(\"label\", inline._label).replace(\"ref\", block._label).getRegex();\ninline.nolink = edit(inline.nolink).replace(\"ref\", block._label).getRegex();\ninline.reflinkSearch = edit(inline.reflinkSearch, \"g\").replace(\"reflink\", inline.reflink).replace(\"nolink\", inline.nolink).getRegex();\ninline.normal = {\n  ...inline\n};\ninline.pedantic = {\n  ...inline.normal,\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/).replace(\"label\", inline._label).getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace(\"label\", inline._label).getRegex()\n};\ninline.gfm = {\n  ...inline.normal,\n  escape: edit(inline.escape).replace(\"])\", \"~|])\").getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\ninline.gfm.url = edit(inline.gfm.url, \"i\").replace(\"email\", inline.gfm._extended_email).getRegex();\ninline.breaks = {\n  ...inline.gfm,\n  br: edit(inline.br).replace(\"{2,}\", \"*\").getRegex(),\n  text: edit(inline.gfm.text).replace(\"\\\\b_\", \"\\\\b_| {2,}\\\\n\").replace(/\\{2,\\}/g, \"*\").getRegex()\n};\n\n// src/Lexer.ts\nfunction smartypants(text) {\n  return text.replace(/---/g, \"\\u2014\").replace(/--/g, \"\\u2013\").replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, \"$1\\u2018\").replace(/'/g, \"\\u2019\").replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, \"$1\\u201C\").replace(/\"/g, \"\\u201D\").replace(/\\.{3}/g, \"\\u2026\");\n}\nfunction mangle(text) {\n  let out = \"\",\n    i,\n    ch;\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = \"x\" + ch.toString(16);\n    }\n    out += \"&#\" + ch + \";\";\n  }\n  return out;\n}\nvar _Lexer = class {\n  constructor(options2) {\n    this.tokens = [];\n    this.tokens.links = /* @__PURE__ */Object.create(null);\n    this.options = options2 || _defaults;\n    this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options2) {\n    const lexer2 = new _Lexer(options2);\n    return lexer2.lex(src);\n  }\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src, options2) {\n    const lexer2 = new _Lexer(options2);\n    return lexer2.inlineTokens(src);\n  }\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src.replace(/\\r\\n|\\r/g, \"\\n\");\n    this.blockTokens(src, this.tokens);\n    let next;\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n    return this.tokens;\n  }\n  blockTokens(src, tokens = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/\\t/g, \"    \").replace(/^ +$/gm, \"\");\n    } else {\n      src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n        return leading + \"    \".repeat(tabs.length);\n      });\n    }\n    let token, lastToken, cutSrc, lastParagraphClipped;\n    while (src) {\n      if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some(extTokenizer => {\n        if (token = extTokenizer.call({\n          lexer: this\n        }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.length === 1 && tokens.length > 0) {\n          tokens[tokens.length - 1].raw += \"\\n\";\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === \"paragraph\" || lastToken.type === \"text\")) {\n          lastToken.raw += \"\\n\" + token.raw;\n          lastToken.text += \"\\n\" + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === \"paragraph\" || lastToken.type === \"text\")) {\n          lastToken.raw += \"\\n\" + token.raw;\n          lastToken.text += \"\\n\" + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(getStartIndex => {\n          tempStart = getStartIndex.call({\n            lexer: this\n          }, tempSrc);\n          if (typeof tempStart === \"number\" && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n        if (lastParagraphClipped && lastToken.type === \"paragraph\") {\n          lastToken.raw += \"\\n\" + token.raw;\n          lastToken.text += \"\\n\" + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = cutSrc.length !== src.length;\n        src = src.substring(token.raw.length);\n        continue;\n      }\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === \"text\") {\n          lastToken.raw += \"\\n\" + token.raw;\n          lastToken.text += \"\\n\" + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (src) {\n        const errMsg = \"Infinite loop on byte: \" + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n    this.state.top = true;\n    return tokens;\n  }\n  inline(src, tokens = []) {\n    this.inlineQueue.push({\n      src,\n      tokens\n    });\n    return tokens;\n  }\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src, tokens = []) {\n    let token, lastToken, cutSrc;\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar;\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf(\"[\") + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + \"[\" + \"a\".repeat(match[0].length - 2) + \"]\" + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + \"[\" + \"a\".repeat(match[0].length - 2) + \"]\" + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n    while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + \"++\" + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n    }\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = \"\";\n      }\n      keepPrevChar = false;\n      if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some(extTokenizer => {\n        if (token = extTokenizer.call({\n          lexer: this\n        }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === \"text\" && lastToken.type === \"text\") {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === \"text\" && lastToken.type === \"text\") {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(getStartIndex => {\n          tempStart = getStartIndex.call({\n            lexer: this\n          }, tempSrc);\n          if (typeof tempStart === \"number\" && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== \"_\") {\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === \"text\") {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (src) {\n        const errMsg = \"Infinite loop on byte: \" + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n    return tokens;\n  }\n};\n\n// src/Renderer.ts\nvar _Renderer = class {\n  constructor(options2) {\n    this.options = options2 || _defaults;\n  }\n  code(code, infostring, escaped) {\n    const lang = (infostring || \"\").match(/\\S*/)[0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n    code = code.replace(/\\n$/, \"\") + \"\\n\";\n    if (!lang) {\n      return \"<pre><code>\" + (escaped ? code : escape(code, true)) + \"</code></pre>\\n\";\n    }\n    return '<pre><code class=\"' + this.options.langPrefix + escape(lang) + '\">' + (escaped ? code : escape(code, true)) + \"</code></pre>\\n\";\n  }\n  blockquote(quote) {\n    return `<blockquote>\n${quote}</blockquote>\n`;\n  }\n  html(html, block2) {\n    return html;\n  }\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      const id = this.options.headerPrefix + slugger.slug(raw);\n      return `<h${level} id=\"${id}\">${text}</h${level}>\n`;\n    }\n    return `<h${level}>${text}</h${level}>\n`;\n  }\n  hr() {\n    return this.options.xhtml ? \"<hr/>\\n\" : \"<hr>\\n\";\n  }\n  list(body, ordered, start) {\n    const type = ordered ? \"ol\" : \"ul\",\n      startatt = ordered && start !== 1 ? ' start=\"' + start + '\"' : \"\";\n    return \"<\" + type + startatt + \">\\n\" + body + \"</\" + type + \">\\n\";\n  }\n  listitem(text, task, checked) {\n    return `<li>${text}</li>\n`;\n  }\n  checkbox(checked) {\n    return \"<input \" + (checked ? 'checked=\"\" ' : \"\") + 'disabled=\"\" type=\"checkbox\"' + (this.options.xhtml ? \" /\" : \"\") + \"> \";\n  }\n  paragraph(text) {\n    return `<p>${text}</p>\n`;\n  }\n  table(header, body) {\n    if (body) body = `<tbody>${body}</tbody>`;\n    return \"<table>\\n<thead>\\n\" + header + \"</thead>\\n\" + body + \"</table>\\n\";\n  }\n  tablerow(content) {\n    return `<tr>\n${content}</tr>\n`;\n  }\n  tablecell(content, flags) {\n    const type = flags.header ? \"th\" : \"td\";\n    const tag = flags.align ? `<${type} align=\"${flags.align}\">` : `<${type}>`;\n    return tag + content + `</${type}>\n`;\n  }\n  /**\n   * span level renderer\n   */\n  strong(text) {\n    return `<strong>${text}</strong>`;\n  }\n  em(text) {\n    return `<em>${text}</em>`;\n  }\n  codespan(text) {\n    return `<code>${text}</code>`;\n  }\n  br() {\n    return this.options.xhtml ? \"<br/>\" : \"<br>\";\n  }\n  del(text) {\n    return `<del>${text}</del>`;\n  }\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += \">\" + text + \"</a>\";\n    return out;\n  }\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${title}\"`;\n    }\n    out += this.options.xhtml ? \"/>\" : \">\";\n    return out;\n  }\n  text(text) {\n    return text;\n  }\n};\n\n// src/TextRenderer.ts\nvar _TextRenderer = class {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n  em(text) {\n    return text;\n  }\n  codespan(text) {\n    return text;\n  }\n  del(text) {\n    return text;\n  }\n  html(text) {\n    return text;\n  }\n  text(text) {\n    return text;\n  }\n  link(href, title, text) {\n    return \"\" + text;\n  }\n  image(href, title, text) {\n    return \"\" + text;\n  }\n  br() {\n    return \"\";\n  }\n};\n\n// src/Slugger.ts\nvar _Slugger = class {\n  constructor() {\n    this.seen = {};\n  }\n  serialize(value) {\n    return value.toLowerCase().trim().replace(/<[!\\/a-z].*?>/ig, \"\").replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, \"\").replace(/\\s/g, \"-\");\n  }\n  /**\n   * Finds the next safe (unique) slug to use\n   */\n  getNextSafeSlug(originalSlug, isDryRun) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + \"-\" + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n    return slug;\n  }\n  /**\n   * Convert string to unique id\n   */\n  slug(value, options2 = {}) {\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options2.dryrun);\n  }\n};\n\n// src/Parser.ts\nvar _Parser = class {\n  constructor(options2) {\n    this.options = options2 || _defaults;\n    this.options.renderer = this.options.renderer || new _Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new _TextRenderer();\n    this.slugger = new _Slugger();\n  }\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options2) {\n    const parser2 = new _Parser(options2);\n    return parser2.parse(tokens);\n  }\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens, options2) {\n    const parser2 = new _Parser(options2);\n    return parser2.parseInline(tokens);\n  }\n  /**\n   * Parse Loop\n   */\n  parse(tokens, top = true) {\n    let out = \"\",\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox,\n      ret;\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({\n          parser: this\n        }, token);\n        if (ret !== false || ![\"space\", \"hr\", \"heading\", \"code\", \"table\", \"blockquote\", \"list\", \"html\", \"paragraph\", \"text\"].includes(token.type)) {\n          out += ret || \"\";\n          continue;\n        }\n      }\n      switch (token.type) {\n        case \"space\":\n          {\n            continue;\n          }\n        case \"hr\":\n          {\n            out += this.renderer.hr();\n            continue;\n          }\n        case \"heading\":\n          {\n            out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape(this.parseInline(token.tokens, this.textRenderer)), this.slugger);\n            continue;\n          }\n        case \"code\":\n          {\n            out += this.renderer.code(token.text, token.lang, !!token.escaped);\n            continue;\n          }\n        case \"table\":\n          {\n            header = \"\";\n            cell = \"\";\n            l2 = token.header.length;\n            for (j = 0; j < l2; j++) {\n              cell += this.renderer.tablecell(this.parseInline(token.header[j].tokens), {\n                header: true,\n                align: token.align[j]\n              });\n            }\n            header += this.renderer.tablerow(cell);\n            body = \"\";\n            l2 = token.rows.length;\n            for (j = 0; j < l2; j++) {\n              row = token.rows[j];\n              cell = \"\";\n              l3 = row.length;\n              for (k = 0; k < l3; k++) {\n                cell += this.renderer.tablecell(this.parseInline(row[k].tokens), {\n                  header: false,\n                  align: token.align[k]\n                });\n              }\n              body += this.renderer.tablerow(cell);\n            }\n            out += this.renderer.table(header, body);\n            continue;\n          }\n        case \"blockquote\":\n          {\n            body = this.parse(token.tokens);\n            out += this.renderer.blockquote(body);\n            continue;\n          }\n        case \"list\":\n          {\n            ordered = token.ordered;\n            start = token.start;\n            loose = token.loose;\n            l2 = token.items.length;\n            body = \"\";\n            for (j = 0; j < l2; j++) {\n              item = token.items[j];\n              checked = item.checked;\n              task = item.task;\n              itemBody = \"\";\n              if (item.task) {\n                checkbox = this.renderer.checkbox(!!checked);\n                if (loose) {\n                  if (item.tokens.length > 0 && item.tokens[0].type === \"paragraph\") {\n                    item.tokens[0].text = checkbox + \" \" + item.tokens[0].text;\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === \"text\") {\n                      item.tokens[0].tokens[0].text = checkbox + \" \" + item.tokens[0].tokens[0].text;\n                    }\n                  } else {\n                    item.tokens.unshift({\n                      type: \"text\",\n                      text: checkbox\n                    });\n                  }\n                } else {\n                  itemBody += checkbox;\n                }\n              }\n              itemBody += this.parse(item.tokens, loose);\n              body += this.renderer.listitem(itemBody, task, !!checked);\n            }\n            out += this.renderer.list(body, ordered, start);\n            continue;\n          }\n        case \"html\":\n          {\n            out += this.renderer.html(token.text, token.block);\n            continue;\n          }\n        case \"paragraph\":\n          {\n            out += this.renderer.paragraph(this.parseInline(token.tokens));\n            continue;\n          }\n        case \"text\":\n          {\n            body = token.tokens ? this.parseInline(token.tokens) : token.text;\n            while (i + 1 < l && tokens[i + 1].type === \"text\") {\n              token = tokens[++i];\n              body += \"\\n\" + (token.tokens ? this.parseInline(token.tokens) : token.text);\n            }\n            out += top ? this.renderer.paragraph(body) : body;\n            continue;\n          }\n        default:\n          {\n            const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n            if (this.options.silent) {\n              console.error(errMsg);\n              return \"\";\n            } else {\n              throw new Error(errMsg);\n            }\n          }\n      }\n    }\n    return out;\n  }\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = \"\",\n      i,\n      token,\n      ret;\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({\n          parser: this\n        }, token);\n        if (ret !== false || ![\"escape\", \"html\", \"link\", \"image\", \"strong\", \"em\", \"codespan\", \"br\", \"del\", \"text\"].includes(token.type)) {\n          out += ret || \"\";\n          continue;\n        }\n      }\n      switch (token.type) {\n        case \"escape\":\n          {\n            out += renderer.text(token.text);\n            break;\n          }\n        case \"html\":\n          {\n            out += renderer.html(token.text);\n            break;\n          }\n        case \"link\":\n          {\n            out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n            break;\n          }\n        case \"image\":\n          {\n            out += renderer.image(token.href, token.title, token.text);\n            break;\n          }\n        case \"strong\":\n          {\n            out += renderer.strong(this.parseInline(token.tokens, renderer));\n            break;\n          }\n        case \"em\":\n          {\n            out += renderer.em(this.parseInline(token.tokens, renderer));\n            break;\n          }\n        case \"codespan\":\n          {\n            out += renderer.codespan(token.text);\n            break;\n          }\n        case \"br\":\n          {\n            out += renderer.br();\n            break;\n          }\n        case \"del\":\n          {\n            out += renderer.del(this.parseInline(token.tokens, renderer));\n            break;\n          }\n        case \"text\":\n          {\n            out += renderer.text(token.text);\n            break;\n          }\n        default:\n          {\n            const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n            if (this.options.silent) {\n              console.error(errMsg);\n              return \"\";\n            } else {\n              throw new Error(errMsg);\n            }\n          }\n      }\n    }\n    return out;\n  }\n};\n\n// src/Hooks.ts\nvar _Hooks = class {\n  constructor(options2) {\n    this.options = options2 || _defaults;\n  }\n  /**\n   * Process markdown before marked\n   */\n  preprocess(markdown) {\n    return markdown;\n  }\n  /**\n   * Process HTML after marked is finished\n   */\n  postprocess(html) {\n    return html;\n  }\n};\n_Hooks.passThroughHooks = /* @__PURE__ */new Set([\"preprocess\", \"postprocess\"]);\n\n// src/Instance.ts\nvar _parseMarkdown, parseMarkdown_fn, _onError, onError_fn;\nvar Marked = class {\n  constructor(...args) {\n    __privateAdd(this, _parseMarkdown);\n    __privateAdd(this, _onError);\n    this.defaults = _getDefaults();\n    this.options = this.setOptions;\n    this.parse = __privateMethod(this, _parseMarkdown, parseMarkdown_fn).call(this, _Lexer.lex, _Parser.parse);\n    this.parseInline = __privateMethod(this, _parseMarkdown, parseMarkdown_fn).call(this, _Lexer.lexInline, _Parser.parseInline);\n    this.Parser = _Parser;\n    this.parser = _Parser.parse;\n    this.Renderer = _Renderer;\n    this.TextRenderer = _TextRenderer;\n    this.Lexer = _Lexer;\n    this.lexer = _Lexer.lex;\n    this.Tokenizer = _Tokenizer;\n    this.Slugger = _Slugger;\n    this.Hooks = _Hooks;\n    this.use(...args);\n  }\n  /**\n   * Run callback for every token\n   */\n  walkTokens(tokens, callback) {\n    let values = [];\n    for (const token of tokens) {\n      values = values.concat(callback.call(this, token));\n      switch (token.type) {\n        case \"table\":\n          {\n            for (const cell of token.header) {\n              values = values.concat(this.walkTokens(cell.tokens, callback));\n            }\n            for (const row of token.rows) {\n              for (const cell of row) {\n                values = values.concat(this.walkTokens(cell.tokens, callback));\n              }\n            }\n            break;\n          }\n        case \"list\":\n          {\n            values = values.concat(this.walkTokens(token.items, callback));\n            break;\n          }\n        default:\n          {\n            if (this.defaults.extensions && this.defaults.extensions.childTokens && this.defaults.extensions.childTokens[token.type]) {\n              this.defaults.extensions.childTokens[token.type].forEach(childTokens => {\n                values = values.concat(this.walkTokens(token[childTokens], callback));\n              });\n            } else if (token.tokens) {\n              values = values.concat(this.walkTokens(token.tokens, callback));\n            }\n          }\n      }\n    }\n    return values;\n  }\n  use(...args) {\n    const extensions = this.defaults.extensions || {\n      renderers: {},\n      childTokens: {}\n    };\n    args.forEach(pack => {\n      const opts = {\n        ...pack\n      };\n      opts.async = this.defaults.async || opts.async || false;\n      if (pack.extensions) {\n        pack.extensions.forEach(ext => {\n          if (!ext.name) {\n            throw new Error(\"extension name required\");\n          }\n          if (\"renderer\" in ext) {\n            const prevRenderer = extensions.renderers[ext.name];\n            if (prevRenderer) {\n              extensions.renderers[ext.name] = function (...args2) {\n                let ret = ext.renderer.apply(this, args2);\n                if (ret === false) {\n                  ret = prevRenderer.apply(this, args2);\n                }\n                return ret;\n              };\n            } else {\n              extensions.renderers[ext.name] = ext.renderer;\n            }\n          }\n          if (\"tokenizer\" in ext) {\n            if (!ext.level || ext.level !== \"block\" && ext.level !== \"inline\") {\n              throw new Error(\"extension level must be 'block' or 'inline'\");\n            }\n            if (extensions[ext.level]) {\n              extensions[ext.level].unshift(ext.tokenizer);\n            } else {\n              extensions[ext.level] = [ext.tokenizer];\n            }\n            if (ext.start) {\n              if (ext.level === \"block\") {\n                if (extensions.startBlock) {\n                  extensions.startBlock.push(ext.start);\n                } else {\n                  extensions.startBlock = [ext.start];\n                }\n              } else if (ext.level === \"inline\") {\n                if (extensions.startInline) {\n                  extensions.startInline.push(ext.start);\n                } else {\n                  extensions.startInline = [ext.start];\n                }\n              }\n            }\n          }\n          if (\"childTokens\" in ext && ext.childTokens) {\n            extensions.childTokens[ext.name] = ext.childTokens;\n          }\n        });\n        opts.extensions = extensions;\n      }\n      if (pack.renderer) {\n        const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n        for (const prop in pack.renderer) {\n          const prevRenderer = renderer[prop];\n          renderer[prop] = (...args2) => {\n            let ret = pack.renderer[prop].apply(renderer, args2);\n            if (ret === false) {\n              ret = prevRenderer.apply(renderer, args2);\n            }\n            return ret;\n          };\n        }\n        opts.renderer = renderer;\n      }\n      if (pack.tokenizer) {\n        const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n        for (const prop in pack.tokenizer) {\n          const prevTokenizer = tokenizer[prop];\n          tokenizer[prop] = (...args2) => {\n            let ret = pack.tokenizer[prop].apply(tokenizer, args2);\n            if (ret === false) {\n              ret = prevTokenizer.apply(tokenizer, args2);\n            }\n            return ret;\n          };\n        }\n        opts.tokenizer = tokenizer;\n      }\n      if (pack.hooks) {\n        const hooks = this.defaults.hooks || new _Hooks();\n        for (const prop in pack.hooks) {\n          const prevHook = hooks[prop];\n          if (_Hooks.passThroughHooks.has(prop)) {\n            hooks[prop] = arg => {\n              if (this.defaults.async) {\n                return Promise.resolve(pack.hooks[prop].call(hooks, arg)).then(ret2 => {\n                  return prevHook.call(hooks, ret2);\n                });\n              }\n              const ret = pack.hooks[prop].call(hooks, arg);\n              return prevHook.call(hooks, ret);\n            };\n          } else {\n            hooks[prop] = (...args2) => {\n              let ret = pack.hooks[prop].apply(hooks, args2);\n              if (ret === false) {\n                ret = prevHook.apply(hooks, args2);\n              }\n              return ret;\n            };\n          }\n        }\n        opts.hooks = hooks;\n      }\n      if (pack.walkTokens) {\n        const walkTokens2 = this.defaults.walkTokens;\n        opts.walkTokens = function (token) {\n          let values = [];\n          values.push(pack.walkTokens.call(this, token));\n          if (walkTokens2) {\n            values = values.concat(walkTokens2.call(this, token));\n          }\n          return values;\n        };\n      }\n      this.defaults = {\n        ...this.defaults,\n        ...opts\n      };\n    });\n    return this;\n  }\n  setOptions(opt) {\n    this.defaults = {\n      ...this.defaults,\n      ...opt\n    };\n    return this;\n  }\n};\n_parseMarkdown = new WeakSet();\nparseMarkdown_fn = function (lexer2, parser2) {\n  return (src, optOrCallback, callback) => {\n    if (typeof optOrCallback === \"function\") {\n      callback = optOrCallback;\n      optOrCallback = null;\n    }\n    const origOpt = {\n      ...optOrCallback\n    };\n    const opt = {\n      ...this.defaults,\n      ...origOpt\n    };\n    const throwError = __privateMethod(this, _onError, onError_fn).call(this, !!opt.silent, !!opt.async, callback);\n    if (typeof src === \"undefined\" || src === null) {\n      return throwError(new Error(\"marked(): input parameter is undefined or null\"));\n    }\n    if (typeof src !== \"string\") {\n      return throwError(new Error(\"marked(): input parameter is of type \" + Object.prototype.toString.call(src) + \", string expected\"));\n    }\n    checkDeprecations(opt, callback);\n    if (opt.hooks) {\n      opt.hooks.options = opt;\n    }\n    if (callback) {\n      const highlight = opt.highlight;\n      let tokens;\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src);\n        }\n        tokens = lexer2(src, opt);\n      } catch (e) {\n        return throwError(e);\n      }\n      const done = err => {\n        let out;\n        if (!err) {\n          try {\n            if (opt.walkTokens) {\n              this.walkTokens(tokens, opt.walkTokens);\n            }\n            out = parser2(tokens, opt);\n            if (opt.hooks) {\n              out = opt.hooks.postprocess(out);\n            }\n          } catch (e) {\n            err = e;\n          }\n        }\n        opt.highlight = highlight;\n        return err ? throwError(err) : callback(null, out);\n      };\n      if (!highlight || highlight.length < 3) {\n        return done();\n      }\n      delete opt.highlight;\n      if (!tokens.length) return done();\n      let pending = 0;\n      this.walkTokens(tokens, token => {\n        if (token.type === \"code\") {\n          pending++;\n          setTimeout(() => {\n            highlight(token.text, token.lang, (err, code) => {\n              if (err) {\n                return done(err);\n              }\n              if (code != null && code !== token.text) {\n                token.text = code;\n                token.escaped = true;\n              }\n              pending--;\n              if (pending === 0) {\n                done();\n              }\n            });\n          }, 0);\n        }\n      });\n      if (pending === 0) {\n        done();\n      }\n      return;\n    }\n    if (opt.async) {\n      return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src).then(src2 => lexer2(src2, opt)).then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens).then(tokens => parser2(tokens, opt)).then(html => opt.hooks ? opt.hooks.postprocess(html) : html).catch(throwError);\n    }\n    try {\n      if (opt.hooks) {\n        src = opt.hooks.preprocess(src);\n      }\n      const tokens = lexer2(src, opt);\n      if (opt.walkTokens) {\n        this.walkTokens(tokens, opt.walkTokens);\n      }\n      let html = parser2(tokens, opt);\n      if (opt.hooks) {\n        html = opt.hooks.postprocess(html);\n      }\n      return html;\n    } catch (e) {\n      return throwError(e);\n    }\n  };\n};\n_onError = new WeakSet();\nonError_fn = function (silent, async, callback) {\n  return e => {\n    e.message += \"\\nPlease report this to https://github.com/markedjs/marked.\";\n    if (silent) {\n      const msg = \"<p>An error occurred:</p><pre>\" + escape(e.message + \"\", true) + \"</pre>\";\n      if (async) {\n        return Promise.resolve(msg);\n      }\n      if (callback) {\n        callback(null, msg);\n        return;\n      }\n      return msg;\n    }\n    if (async) {\n      return Promise.reject(e);\n    }\n    if (callback) {\n      callback(e);\n      return;\n    }\n    throw e;\n  };\n};\n\n// src/marked.ts\nvar markedInstance = new Marked();\nfunction marked(src, opt, callback) {\n  return markedInstance.parse(src, opt, callback);\n}\nmarked.options = marked.setOptions = function (options2) {\n  markedInstance.setOptions(options2);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\nmarked.use = function (...args) {\n  markedInstance.use(...args);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\nmarked.walkTokens = function (tokens, callback) {\n  return markedInstance.walkTokens(tokens, callback);\n};\nmarked.parseInline = markedInstance.parseInline;\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Slugger = _Slugger;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nvar options = marked.options;\nvar setOptions = marked.setOptions;\nvar use = marked.use;\nvar walkTokens = marked.walkTokens;\nvar parseInline = marked.parseInline;\nvar parse = marked;\nvar parser = _Parser.parse;\nvar lexer = _Lexer.lex;\nexport { _Hooks as Hooks, _Lexer as Lexer, Marked, _Parser as Parser, _Renderer as Renderer, _Slugger as Slugger, _TextRenderer as TextRenderer, _Tokenizer as Tokenizer, _defaults as defaults, _getDefaults as getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };","map":{"version":3,"names":["_getDefaults","async","baseUrl","breaks","extensions","gfm","headerIds","headerPrefix","highlight","hooks","langPrefix","mangle","pedantic","renderer","sanitize","sanitizer","silent","smartypants","tokenizer","walkTokens","xhtml","_defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape","html","encode","test","replace","unescapeTest","unescape","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","edit","regex","opt","obj","name","val","getRegex","nonWordAndColonTest","originIndependentUrl","cleanUrl","base","href","prot","decodeURIComponent","e","indexOf","resolveUrl","encodeURI","baseUrls","justDomain","protocol","domain","rtrim","relativeBase","noopTest","exec","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","i","trim","shift","length","pop","splice","push","c","invert","l","suffLen","currChar","slice","findClosingBracket","b","level","checkDeprecations","callback","console","warn","outputLink","cap","link","raw","lexer2","title","text","state","inLink","token","type","tokens","inlineTokens","indentCodeCompensation","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","_Tokenizer","constructor","options2","options","space","src","rules","block","newline","code","codeBlockStyle","fences","lang","inline","_escapes","heading","trimmed","depth","lexer","hr","blockquote","top","blockTokens","list","istask","ischecked","indent","blankLine","endsWithBlankLine","line","nextLine","rawLine","itemContents","endEarly","bull","isordered","ordered","start","loose","items","itemRegex","t","repeat","trimLeft","search","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","task","checked","trimRight","spacers","filter","hasMultipleLineBreaks","some","pre","paragraph","def","tag","table","item","header","align","rows","j","k","lheading","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","reflink","links","nolink","emStrong","maskedSrc","prevChar","lDelim","nextChar","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","rDelimAst","rDelimUnd","lastIndex","index","text2","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","mangle2","url","prevCapZero","_backpedal","inlineText","smartypants2","_paragraph","_label","_title","bullet","listItemStart","_tag","_comment","normal","reflinkSearch","_punctuation","blockSkip","anyPunctuation","_scheme","_email","_attribute","_href","strong","middle","endAst","endUnd","em","_extended_email","out","charCodeAt","random","toString","_Lexer","Object","create","inlineQueue","lex","lexInline","next","leading","tabs","lastToken","cutSrc","lastParagraphClipped","extTokenizer","call","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","error","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","_Renderer","infostring","quote","block2","slugger","id","slug","body","startatt","listitem","checkbox","tablerow","content","tablecell","flags","image","_TextRenderer","_Slugger","seen","serialize","value","getNextSafeSlug","originalSlug","isDryRun","occurenceAccumulator","hasOwnProperty","dryrun","_Parser","textRenderer","parse","parser2","parseInline","l2","l3","cell","itemBody","ret","renderers","parser","unshift","_Hooks","preprocess","markdown","postprocess","passThroughHooks","Set","_parseMarkdown","parseMarkdown_fn","_onError","onError_fn","Marked","args","__privateAdd","defaults","setOptions","__privateMethod","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Slugger","Hooks","use","values","concat","childTokens","pack","opts","ext","prevRenderer","args2","apply","prop","prevTokenizer","prevHook","has","arg","Promise","resolve","then","ret2","walkTokens2","WeakSet","optOrCallback","origOpt","throwError","prototype","done","err","pending","setTimeout","src2","all","catch","message","msg","reject","markedInstance","marked","getDefaults"],"sources":["C:\\Users\\Yett\\Desktop\\borrador\\node_modules\\marked\\src\\defaults.ts","C:\\Users\\Yett\\Desktop\\borrador\\node_modules\\marked\\src\\helpers.ts","C:\\Users\\Yett\\Desktop\\borrador\\node_modules\\marked\\src\\Tokenizer.ts","C:\\Users\\Yett\\Desktop\\borrador\\node_modules\\marked\\src\\rules.ts","C:\\Users\\Yett\\Desktop\\borrador\\node_modules\\marked\\src\\Lexer.ts","C:\\Users\\Yett\\Desktop\\borrador\\node_modules\\marked\\src\\Renderer.ts","C:\\Users\\Yett\\Desktop\\borrador\\node_modules\\marked\\src\\TextRenderer.ts","C:\\Users\\Yett\\Desktop\\borrador\\node_modules\\marked\\src\\Slugger.ts","C:\\Users\\Yett\\Desktop\\borrador\\node_modules\\marked\\src\\Parser.ts","C:\\Users\\Yett\\Desktop\\borrador\\node_modules\\marked\\src\\Hooks.ts","C:\\Users\\Yett\\Desktop\\borrador\\node_modules\\marked\\src\\Instance.ts","C:\\Users\\Yett\\Desktop\\borrador\\node_modules\\marked\\src\\marked.ts"],"sourcesContent":["import type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Gets the original marked default options.\n */\nexport function _getDefaults(): MarkedOptions {\n  return {\n    async: false,\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    hooks: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\n\nexport let _defaults = _getDefaults();\n\nexport function changeDefaults(newDefaults: MarkedOptions) {\n  _defaults = newDefaults;\n}\n","import type { MarkedOptions } from './MarkedOptions.ts';\nimport type { ResultCallback } from './marked.ts';\nimport type { Rule } from './rules.ts';\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch: string) => escapeReplacements[ch];\n\nexport function escape(html: string, encode?: boolean) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\nexport function unescape(html: string) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\n\nexport function edit(regex: Rule, opt?: string) {\n  regex = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  const obj = {\n    replace: (name: string | RegExp, val: string | RegExp) => {\n      val = typeof val === 'object' && 'source' in val ? val.source : val;\n      val = val.replace(caret, '$1');\n      regex = (regex as string).replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\nexport function cleanUrl(sanitize: boolean | undefined, base: string | undefined | null, href: string) {\n  if (sanitize) {\n    let prot;\n    try {\n      prot = decodeURIComponent(unescape(href))\n        .replace(nonWordAndColonTest, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nconst baseUrls: Record<string, string> = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\nexport function resolveUrl(base: string, href: string) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nexport const noopTest = { exec: () => null };\n\nexport function splitCells(tableRow: string, count: number) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n      let escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n    cells.pop();\n  }\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nexport function rtrim(str: string, c: string, invert?: boolean) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nexport function findClosingBracket(str: string, b: string) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  const l = str.length;\n  let level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nexport function checkDeprecations(opt: MarkedOptions, callback?: ResultCallback) {\n  if (!opt || opt.silent) {\n    return;\n  }\n\n  if (callback) {\n    console.warn('marked(): callback is deprecated since version 5.0.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/using_pro#async');\n  }\n\n  if (opt.sanitize || opt.sanitizer) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n\n  if (opt.highlight || opt.langPrefix !== 'language-') {\n    console.warn('marked(): highlight and langPrefix parameters are deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-highlight.');\n  }\n\n  if (opt.mangle) {\n    console.warn('marked(): mangle parameter is enabled by default, but is deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install https://www.npmjs.com/package/marked-mangle, or disable by setting `{mangle: false}`.');\n  }\n\n  if (opt.baseUrl) {\n    console.warn('marked(): baseUrl parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-base-url.');\n  }\n\n  if (opt.smartypants) {\n    console.warn('marked(): smartypants parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-smartypants.');\n  }\n\n  if (opt.xhtml) {\n    console.warn('marked(): xhtml parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-xhtml.');\n  }\n\n  if (opt.headerIds || opt.headerPrefix) {\n    console.warn('marked(): headerIds and headerPrefix parameters enabled by default, but are deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install  https://www.npmjs.com/package/marked-gfm-heading-id, or disable by setting `{headerIds: false}`.');\n  }\n}\n","import { _defaults } from './defaults.ts';\nimport {\n  rtrim,\n  splitCells,\n  escape,\n  findClosingBracket\n} from './helpers.ts';\nimport { _Lexer } from './Lexer.ts';\nimport type { Links, Tokens } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\nfunction outputLink(cap: string[], link: Pick<Tokens.Link, 'href' | 'title'>, raw: string, lexer: _Lexer): Tokens.Link | Tokens.Image {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token: Tokens.Link = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text)\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n  return {\n    type: 'image',\n    raw,\n    href,\n    title,\n    text: escape(text)\n  };\n}\n\nfunction indentCodeCompensation(raw: string, text: string) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(/^\\s+/);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nexport class _Tokenizer {\n  options: MarkedOptions;\n  rules: any;\n  lexer!: _Lexer;\n\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n  }\n\n  space(src: string): Tokens.Space | undefined {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n\n  code(src: string): Tokens.Code | undefined {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text\n      };\n    }\n  }\n\n  fences(src: string): Tokens.Code | undefined {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n        text\n      };\n    }\n  }\n\n  heading(src: string): Tokens.Heading | undefined {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  hr(src: string): Tokens.Hr | undefined {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n\n  blockquote(src: string): Tokens.Blockquote | undefined {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n      const top = this.lexer.state.top;\n      this.lexer.state.top = true;\n      const tokens = this.lexer.blockTokens(text);\n      this.lexer.state.top = top;\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens,\n        text\n      };\n    }\n  }\n\n  list(src: string): Tokens.List | undefined {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine,\n        line, nextLine, rawLine, itemContents, endEarly;\n\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list: Tokens.List = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: [] as Tokens.ListItem[]\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        endEarly = false;\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t: string) => ' '.repeat(3 * t.length));\n        nextLine = src.split('\\n', 1)[0];\n\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        blankLine = false;\n\n        if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            nextLine = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            }\n\n            // End list item if found code fences\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new heading\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(src)) {\n              break;\n            }\n\n            if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n              itemContents += '\\n' + nextLine.slice(indent);\n            } else {\n              // not enough indentation\n              if (blankLine) {\n                break;\n              }\n\n              // paragraph continuation unless last line was a different block level element\n              if (line.search(/[^ ]/) >= 4) { // indented code block\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n\n              itemContents += '\\n' + nextLine;\n            }\n\n            if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n            line = nextLine.slice(indent);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      (list.items[list.items.length - 1] as Tokens.ListItem).text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n\n      const l = list.items.length;\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n\n        if (!list.loose) {\n          // Check if list should be loose\n          const spacers = list.items[i].tokens!.filter(t => t.type === 'space');\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw!));\n\n          list.loose = hasMultipleLineBreaks;\n        }\n      }\n\n      // Set all items to loose if list is loose\n      if (list.loose) {\n        for (i = 0; i < l; i++) {\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src: string): Tokens.HTML | Tokens.Paragraph | undefined {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token: Tokens.HTML | Tokens.Paragraph = {\n        type: 'html',\n        block: true,\n        raw: cap[0],\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n      if (this.options.sanitize) {\n        const text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        const paragraph = token as unknown as Tokens.Paragraph;\n        paragraph.type = 'paragraph';\n        paragraph.text = text;\n        paragraph.tokens = this.lexer.inline(text);\n      }\n      return token;\n    }\n  }\n\n  def(src: string): Tokens.Def | undefined {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href,\n        title\n      };\n    }\n  }\n\n  table(src: string): Tokens.Table | undefined {\n    const cap = this.rules.block.table.exec(src);\n    if (cap) {\n      const item: Tokens.Table = {\n        type: 'table',\n        // splitCells expects a number as second argument\n        // @ts-expect-error\n        header: splitCells(cap[1]).map(c => {\n          return { text: c };\n        }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n\n        let l = item.align.length;\n        let i, j, k, row;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i]!)) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i]!)) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i]!)) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        l = item.rows.length;\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i] as unknown as string, item.header.length).map(c => {\n            return { text: c };\n          });\n        }\n\n        // parse child tokens inside headers and cells\n\n        // header child tokens\n        l = item.header.length;\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = this.lexer.inline(item.header[j].text);\n        }\n\n        // cell child tokens\n        l = item.rows.length;\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = this.lexer.inline(row[k].text);\n          }\n        }\n\n        return item;\n      }\n    }\n  }\n\n  lheading(src: string): Tokens.Heading | undefined {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1])\n      };\n    }\n  }\n\n  paragraph(src: string): Tokens.Paragraph | undefined {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n        ? cap[1].slice(0, -1)\n        : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  text(src: string): Tokens.Text | undefined {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0])\n      };\n    }\n  }\n\n  escape(src: string): Tokens.Escape | undefined {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n\n  tag(src: string): Tokens.Tag | undefined {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: this.options.sanitize\n          ? 'text'\n          : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        block: false,\n        text: this.options.sanitize\n          ? (this.options.sanitizer\n            ? this.options.sanitizer(cap[0])\n            : escape(cap[0]))\n          : cap[0]\n      };\n    }\n  }\n\n  link(src: string): Tokens.Link | Tokens.Image | undefined {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(/>$/.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n\n  reflink(src: string, links: Links): Tokens.Link | Tokens.Image | Tokens.Text | undefined {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n      || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n\n  emStrong(src: string, maskedSrc: string, prevChar = ''): Tokens.Em | Tokens.Strong | undefined {\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n      const lLength = match[0].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n\n        const raw = src.slice(0, lLength + match.index + rLength + 1);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text)\n        };\n      }\n    }\n  }\n\n  codespan(src: string): Tokens.Codespan | undefined {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  br(src: string): Tokens.Br | undefined {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n\n  del(src: string): Tokens.Del | undefined {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2])\n      };\n    }\n  }\n\n  autolink(src: string, mangle: (cap: string) => string): Tokens.Link | undefined {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  url(src: string, mangle: (cap: string) => string): Tokens.Link | undefined {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  inlineText(src: string, smartypants: (cap: string) => string): Tokens.Text | undefined {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      let text;\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n}\n","import {\n  noopTest,\n  edit\n} from './helpers.ts';\n\nexport type Rule = RegExp | string;\n\nexport interface Rules {\n  [ruleName: string]: Pick<RegExp, 'exec'> | Rule | Rules;\n}\n\ntype BlockRuleNames =\n    | 'newline'\n    | 'code'\n    | 'fences'\n    | 'hr'\n    | 'heading'\n    | 'blockquote'\n    | 'list'\n    | 'html'\n    | 'def'\n    | 'lheading'\n    | '_paragraph'\n    | 'text'\n    | '_label'\n    | '_title'\n    | 'bullet'\n    | 'listItemStart'\n    | '_tag'\n    | '_comment'\n    | 'paragraph'\n    | 'uote' ;\n\ntype BlockSubRuleNames = 'normal' | 'gfm' | 'pedantic';\n\ntype InlineRuleNames =\n    | 'escape'\n    | 'autolink'\n    | 'tag'\n    | 'link'\n    | 'reflink'\n    | 'nolink'\n    | 'reflinkSearch'\n    | 'code'\n    | 'br'\n    | 'text'\n    | '_punctuation'\n    | 'punctuation'\n    | 'blockSkip'\n    | 'escapedEmSt'\n    | '_comment'\n    | '_escapes'\n    | '_scheme'\n    | '_email'\n    | '_attribute'\n    | '_label'\n    | '_href'\n    | '_title'\n    | 'strong'\n    | '_extended_email'\n    | '_backpedal';\n\ntype InlineSubRuleNames = 'gfm' | 'emStrong' | 'normal' | 'pedantic'| 'breaks';\n\n/**\n * Block-Level Grammar\n */\n// Not all rules are defined in the object literal\n// @ts-expect-error\nexport const block: Record<BlockRuleNames, Rule> & Record<BlockSubRuleNames, Rules> & Rules = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^((?:(?!^bull ).|\\n(?!\\n|bull ))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n  .replace('bull', block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.lheading = edit(block.lheading)\n  .replace(/bull/g, block.bullet) // lists can interrupt\n  .getRegex();\n\nblock.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = { ...block };\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = {\n  ...block.normal,\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n    + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n};\n\nblock.gfm.table = edit(block.gfm.table as Rule)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', ' {4}[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.gfm.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('table', block.gfm.table as RegExp) // interrupt paragraphs with table\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = {\n  ...block.normal,\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(block.normal._paragraph as Rule)\n    .replace('hr', block.hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', block.lheading)\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .getRegex()\n};\n\n/**\n * Inline-Level Grammar\n */\n// Not all rules are defined in the object literal\n// @ts-expect-error\nexport const inline: Record<InlineRuleNames, Rule> & Record<InlineSubRuleNames, Rules> & Rules = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/,\n    //         (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //         | Skip orphan inside strong      | Consume to delim | (1) #***              | (2) a***#, a***                    | (3) #***a, ***a                  | (4) ***#                 | (5) #***#                         | (6) a***a\n    rDelimAst: /^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)[punct](\\*+)(?=[\\s]|$)|[^punct\\s](\\*+)(?!\\*)(?=[punct\\s]|$)|(?!\\*)[punct\\s](\\*+)(?=[^punct\\s])|[\\s](\\*+)(?!\\*)(?=[punct])|(?!\\*)[punct](\\*+)(?!\\*)(?=[punct])|[^punct\\s](\\*+)(?=[^punct\\s])/,\n    rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\\s]|$)|[^punct\\s](_+)(?!_)(?=[punct\\s]|$)|(?!_)[punct\\s](_+)(?=[^punct\\s])|[\\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])/ // ^- Not allowed for _\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^((?![*_])[\\spunctuation])/\n};\n\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\ninline._punctuation = '\\\\p{P}$+<=>`^|~';\ninline.punctuation = edit(inline.punctuation, 'u').replace(/punctuation/g, inline._punctuation).getRegex();\n\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\ninline.anyPunctuation = /\\\\[punct]/g;\ninline._escapes = /\\\\([punct])/g;\n\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\n\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim as Rule, 'u')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst as Rule, 'gu')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd as Rule, 'gu')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.anyPunctuation = edit(inline.anyPunctuation as Rule, 'gu')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._escapes = edit(inline._escapes, 'gu')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', inline._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.nolink = edit(inline.nolink)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n  .replace('reflink', inline.reflink)\n  .replace('nolink', inline.nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = { ...inline };\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = {\n  ...inline.normal,\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n};\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = {\n  ...inline.normal,\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\n\ninline.gfm.url = edit(inline.gfm.url as Rule, 'i')\n  .replace('email', inline.gfm._extended_email as RegExp)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = {\n  ...inline.gfm,\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text as Rule)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex()\n};\n","import { _Tokenizer } from './Tokenizer.ts';\nimport { _defaults } from './defaults.ts';\nimport { block, inline } from './rules.ts';\nimport type { Token, TokensList } from './Tokens.ts';\nimport type { MarkedOptions, TokenizerExtension } from './MarkedOptions.ts';\nimport type { Rules } from './rules.ts';\n\n/**\n * smartypants text replacement\n */\nfunction smartypants(text: string) {\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n}\n\n/**\n * mangle email addresses\n */\nfunction mangle(text: string) {\n  let out = '',\n    i,\n    ch;\n\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n\n/**\n * Block Lexer\n */\nexport class _Lexer {\n  tokens: TokensList;\n  options: MarkedOptions;\n  state: {\n    inLink: boolean;\n    inRawBlock: boolean;\n    top: boolean;\n  };\n\n  private tokenizer: _Tokenizer;\n  private inlineQueue: {src: string, tokens: Token[]}[];\n\n  constructor(options?: MarkedOptions) {\n    // TokenList cannot be created in one go\n    // @ts-expect-error\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || _defaults;\n    this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules(): Rules {\n    return {\n      block,\n      inline\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src: string, options?: MarkedOptions) {\n    const lexer = new _Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src: string, options?: MarkedOptions) {\n    const lexer = new _Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src: string) {\n    src = src\n      .replace(/\\r\\n|\\r/g, '\\n');\n\n    this.blockTokens(src, this.tokens);\n\n    let next;\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src: string, tokens?: Token[]): Token[];\n  blockTokens(src: string, tokens?: TokensList): TokensList;\n  blockTokens(src: string, tokens: Token[] = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n    } else {\n      src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n        return leading + '    '.repeat(tabs.length);\n      });\n    }\n\n    let token, lastToken, cutSrc, lastParagraphClipped;\n\n    while (src) {\n      if (this.options.extensions\n        && this.options.extensions.block\n        && this.options.extensions.block.some((extTokenizer: TokenizerExtension['tokenizer']) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = (cutSrc.length !== src.length);\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src: string, tokens: Token[] = []) {\n    this.inlineQueue.push({ src, tokens });\n    return tokens;\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src: string, tokens: Token[] = []): Token[] {\n    let token, lastToken, cutSrc;\n\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out escaped characters\n    while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n    }\n\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      // extensions\n      if (this.options.extensions\n        && this.options.extensions.inline\n        && this.options.extensions.inline.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n","import { _defaults } from './defaults.ts';\nimport {\n  cleanUrl,\n  escape\n} from './helpers.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\nimport { Slugger } from './marked.ts';\n\n/**\n * Renderer\n */\nexport class _Renderer {\n  options: MarkedOptions;\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n  }\n\n  code(code: string, infostring: string | undefined, escaped: boolean): string {\n    const lang = (infostring || '').match(/\\S*/)![0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    code = code.replace(/\\n$/, '') + '\\n';\n\n    if (!lang) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"'\n      + this.options.langPrefix\n      + escape(lang)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  }\n\n  blockquote(quote: string): string {\n    return `<blockquote>\\n${quote}</blockquote>\\n`;\n  }\n\n  html(html: string, block?: boolean) : string {\n    return html;\n  }\n\n  heading(text: string, level: number, raw: string, slugger: Slugger): string {\n    if (this.options.headerIds) {\n      const id = this.options.headerPrefix + slugger.slug(raw);\n      return `<h${level} id=\"${id}\">${text}</h${level}>\\n`;\n    }\n\n    // ignore IDs\n    return `<h${level}>${text}</h${level}>\\n`;\n  }\n\n  hr(): string {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n\n  list(body: string, ordered: boolean, start: number | ''): string {\n    const type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  listitem(text: string, task: boolean, checked: boolean): string {\n    return `<li>${text}</li>\\n`;\n  }\n\n  checkbox(checked: boolean): string {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\"'\n      + (this.options.xhtml ? ' /' : '')\n      + '> ';\n  }\n\n  paragraph(text: string): string {\n    return `<p>${text}</p>\\n`;\n  }\n\n  table(header: string, body: string): string {\n    if (body) body = `<tbody>${body}</tbody>`;\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  }\n\n  tablerow(content: string): string {\n    return `<tr>\\n${content}</tr>\\n`;\n  }\n\n  tablecell(content: string, flags: {\n    header: boolean;\n    align: 'center' | 'left' | 'right' | null;\n  }): string {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align\n      ? `<${type} align=\"${flags.align}\">`\n      : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n\n  /**\n   * span level renderer\n   */\n  strong(text: string): string {\n    return `<strong>${text}</strong>`;\n  }\n\n  em(text: string): string {\n    return `<em>${text}</em>`;\n  }\n\n  codespan(text: string): string {\n    return `<code>${text}</code>`;\n  }\n\n  br(): string {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n\n  del(text: string): string {\n    return `<del>${text}</del>`;\n  }\n\n  link(href: string, title: string | null | undefined, text: string): string {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href) as any;\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  image(href: string, title: string | null, text: string): string {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href) as any;\n    if (href === null) {\n      return text;\n    }\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${title}\"`;\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n\n  text(text: string) : string {\n    return text;\n  }\n}\n","/**\n * TextRenderer\n * returns only the textual part of the token\n */\nexport class _TextRenderer {\n  // no need for block level renderers\n  strong(text: string) {\n    return text;\n  }\n\n  em(text: string) {\n    return text;\n  }\n\n  codespan(text: string) {\n    return text;\n  }\n\n  del(text: string) {\n    return text;\n  }\n\n  html(text: string) {\n    return text;\n  }\n\n  text(text: string) {\n    return text;\n  }\n\n  link(href: string, title: string | null | undefined, text: string) {\n    return '' + text;\n  }\n\n  image(href: string, title: string | null, text: string) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n}\n","import type { SluggerOptions } from './MarkedOptions.ts';\n\n/**\n * Slugger generates header id\n */\nexport class _Slugger {\n  seen: { [slugValue: string]: number };\n\n  constructor() {\n    this.seen = {};\n  }\n\n  serialize(value: string) {\n    return value\n      .toLowerCase()\n      .trim()\n      // remove html tags\n      .replace(/<[!\\/a-z].*?>/ig, '')\n      // remove unwanted chars\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n      .replace(/\\s/g, '-');\n  }\n\n  /**\n   * Finds the next safe (unique) slug to use\n   */\n  getNextSafeSlug(originalSlug: string, isDryRun: boolean | undefined) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n    return slug;\n  }\n\n  /**\n   * Convert string to unique id\n   */\n  slug(value: string, options: SluggerOptions = {}) {\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  }\n}\n","import { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Slugger } from './Slugger.ts';\nimport { _defaults } from './defaults.ts';\nimport {\n  unescape\n} from './helpers.ts';\nimport type { Token, Tokens } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Parsing & Compiling\n */\nexport class _Parser {\n  options: MarkedOptions;\n  renderer: _Renderer;\n  textRenderer: _TextRenderer;\n  slugger: _Slugger;\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n    this.options.renderer = this.options.renderer || new _Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new _TextRenderer();\n    this.slugger = new _Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens: Token[], options?: MarkedOptions) {\n    const parser = new _Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens: Token[], options?: MarkedOptions) {\n    const parser = new _Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens: Token[], top = true): string {\n    let out = '',\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'space': {\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr();\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(\n            this.parseInline(token.tokens) as string,\n            token.depth,\n            unescape(this.parseInline(token.tokens, this.textRenderer) as string),\n            this.slugger);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token.text,\n            token.lang,\n            !!token.escaped);\n          continue;\n        }\n        case 'table': {\n          header = '';\n\n          // header\n          cell = '';\n          l2 = token.header.length;\n          for (j = 0; j < l2; j++) {\n            cell += this.renderer.tablecell(\n              this.parseInline(token.header[j].tokens)!,\n              { header: true, align: token.align[j] }\n            );\n          }\n          header += this.renderer.tablerow(cell);\n\n          body = '';\n          l2 = token.rows.length;\n          for (j = 0; j < l2; j++) {\n            row = token.rows[j];\n\n            cell = '';\n            l3 = row.length;\n            for (k = 0; k < l3; k++) {\n              cell += this.renderer.tablecell(\n                this.parseInline(row[k].tokens)!,\n                { header: false, align: token.align[k] }\n              );\n            }\n\n            body += this.renderer.tablerow(cell);\n          }\n          out += this.renderer.table(header, body);\n          continue;\n        }\n        case 'blockquote': {\n          body = this.parse(token.tokens)!;\n          out += this.renderer.blockquote(body);\n          continue;\n        }\n        case 'list': {\n          ordered = token.ordered;\n          start = token.start;\n          loose = token.loose;\n          l2 = token.items.length;\n\n          body = '';\n          for (j = 0; j < l2; j++) {\n            item = token.items[j];\n            checked = item.checked;\n            task = item.task;\n\n            itemBody = '';\n            if (item.task) {\n              checkbox = this.renderer.checkbox(!!checked);\n              if (loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                  item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                    item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                  }\n                } else {\n                  item.tokens.unshift({\n                    type: 'text',\n                    text: checkbox\n                  } as Tokens.Text);\n                }\n              } else {\n                itemBody += checkbox;\n              }\n            }\n\n            itemBody += this.parse(item.tokens, loose);\n            body += this.renderer.listitem(itemBody, task, !!checked);\n          }\n\n          out += this.renderer.list(body, ordered, start);\n          continue;\n        }\n        case 'html': {\n          out += this.renderer.html(token.text, token.block);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(this.parseInline(token.tokens)!);\n          continue;\n        }\n        case 'text': {\n          body = token.tokens ? this.parseInline(token.tokens) : token.text;\n          while (i + 1 < l && tokens[i + 1].type === 'text') {\n            token = tokens[++i];\n            body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n          }\n          out += top ? this.renderer.paragraph(body!) : body;\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return '';\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens: Token[], renderer?: _Renderer | _TextRenderer): string {\n    renderer = renderer || this.renderer;\n    let out = '',\n      i,\n      token,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token.text);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token.text);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer)!);\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token.href, token.title, token.text);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(this.parseInline(token.tokens, renderer)!);\n          break;\n        }\n        case 'em': {\n          out += renderer.em(this.parseInline(token.tokens, renderer)!);\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token.text);\n          break;\n        }\n        case 'br': {\n          out += renderer.br();\n          break;\n        }\n        case 'del': {\n          out += renderer.del(this.parseInline(token.tokens, renderer)!);\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token.text);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return '';\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n}\n","import { _defaults } from './defaults.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\nexport class _Hooks {\n  options: MarkedOptions;\n\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n  }\n\n  static passThroughHooks = new Set([\n    'preprocess',\n    'postprocess'\n  ]);\n\n  /**\n   * Process markdown before marked\n   */\n  preprocess(markdown: string) {\n    return markdown;\n  }\n\n  /**\n   * Process HTML after marked is finished\n   */\n  postprocess(html: string | undefined) {\n    return html;\n  }\n}\n","import { _getDefaults } from './defaults.js';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Slugger } from './Slugger.ts';\nimport {\n  checkDeprecations,\n  escape\n} from './helpers.ts';\nimport type { MarkedExtension, MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, TokensList } from './Tokens.ts';\n\nexport type ResultCallback = (error: Error | null, parseResult?: string) => undefined | void;\n\nexport class Marked {\n  defaults = _getDefaults();\n  options = this.setOptions;\n\n  parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n  parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n\n  Parser = _Parser;\n  parser = _Parser.parse;\n  Renderer = _Renderer;\n  TextRenderer = _TextRenderer;\n  Lexer = _Lexer;\n  lexer = _Lexer.lex;\n  Tokenizer = _Tokenizer;\n  Slugger = _Slugger;\n  Hooks = _Hooks;\n\n  constructor(...args: MarkedExtension[]) {\n    this.use(...args);\n  }\n\n  /**\n   * Run callback for every token\n   */\n  walkTokens <T = void>(tokens: Token[] | TokensList, callback: (token: Token) => T | T[]) {\n    let values: T[] = [];\n    for (const token of tokens) {\n      values = values.concat(callback.call(this, token));\n      switch (token.type) {\n        case 'table': {\n          for (const cell of token.header) {\n            values = values.concat(this.walkTokens(cell.tokens!, callback));\n          }\n          for (const row of token.rows) {\n            for (const cell of row) {\n              values = values.concat(this.walkTokens(cell.tokens!, callback));\n            }\n          }\n          break;\n        }\n        case 'list': {\n          values = values.concat(this.walkTokens(token.items, callback));\n          break;\n        }\n        default: {\n          if (this.defaults.extensions && this.defaults.extensions.childTokens && this.defaults.extensions.childTokens[token.type]) { // Walk any extensions\n            this.defaults.extensions.childTokens[token.type].forEach((childTokens) => {\n              values = values.concat(this.walkTokens(token[childTokens], callback));\n            });\n          } else if (token.tokens) {\n            values = values.concat(this.walkTokens(token.tokens, callback));\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  use(...args: MarkedExtension[]) {\n    const extensions: NonNullable<MarkedOptions['extensions']> = this.defaults.extensions || { renderers: {}, childTokens: {} } as NonNullable<MarkedOptions['extensions']>;\n\n    args.forEach((pack) => {\n      // copy options to new object\n      const opts = { ...pack } as MarkedOptions;\n\n      // set async to true if it was set to true before\n      opts.async = this.defaults.async || opts.async || false;\n\n      // ==-- Parse \"addon\" extensions --== //\n      if (pack.extensions) {\n        pack.extensions.forEach((ext) => {\n          if (!ext.name) {\n            throw new Error('extension name required');\n          }\n          if ('renderer' in ext) { // Renderer extensions\n            const prevRenderer = extensions.renderers[ext.name];\n            if (prevRenderer) {\n              // Replace extension with func to run new extension but fall back if false\n              extensions.renderers[ext.name] = function(...args) {\n                let ret = ext.renderer.apply(this, args);\n                if (ret === false) {\n                  ret = prevRenderer.apply(this, args);\n                }\n                return ret;\n              };\n            } else {\n              extensions.renderers[ext.name] = ext.renderer;\n            }\n          }\n          if ('tokenizer' in ext) { // Tokenizer Extensions\n            if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n              throw new Error(\"extension level must be 'block' or 'inline'\");\n            }\n            if (extensions[ext.level]) {\n              extensions[ext.level].unshift(ext.tokenizer);\n            } else {\n              extensions[ext.level] = [ext.tokenizer];\n            }\n            if (ext.start) { // Function to check for start of token\n              if (ext.level === 'block') {\n                if (extensions.startBlock) {\n                  extensions.startBlock.push(ext.start!);\n                } else {\n                  extensions.startBlock = [ext.start!];\n                }\n              } else if (ext.level === 'inline') {\n                if (extensions.startInline) {\n                  extensions.startInline.push(ext.start!);\n                } else {\n                  extensions.startInline = [ext.start!];\n                }\n              }\n            }\n          }\n          if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n            extensions.childTokens[ext.name] = ext.childTokens;\n          }\n        });\n        opts.extensions = extensions;\n      }\n\n      // ==-- Parse \"overwrite\" extensions --== //\n      if (pack.renderer) {\n        const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n        for (const prop in pack.renderer) {\n          const prevRenderer = renderer[prop];\n          // Replace renderer with func to run extension, but fall back if false\n          renderer[prop] = (...args: unknown[]) => {\n            let ret = pack.renderer![prop].apply(renderer, args);\n            if (ret === false) {\n              ret = prevRenderer.apply(renderer, args);\n            }\n            return ret;\n          };\n        }\n        opts.renderer = renderer;\n      }\n      if (pack.tokenizer) {\n        const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n        for (const prop in pack.tokenizer) {\n          const prevTokenizer = tokenizer[prop];\n          // Replace tokenizer with func to run extension, but fall back if false\n          tokenizer[prop] = (...args: unknown[]) => {\n            let ret = pack.tokenizer![prop].apply(tokenizer, args);\n            if (ret === false) {\n              ret = prevTokenizer.apply(tokenizer, args);\n            }\n            return ret;\n          };\n        }\n        opts.tokenizer = tokenizer;\n      }\n\n      // ==-- Parse Hooks extensions --== //\n      if (pack.hooks) {\n        const hooks = this.defaults.hooks || new _Hooks();\n        for (const prop in pack.hooks) {\n          const prevHook = hooks[prop];\n          if (_Hooks.passThroughHooks.has(prop)) {\n            hooks[prop as 'preprocess' | 'postprocess'] = (arg: string | undefined) => {\n              if (this.defaults.async) {\n                return Promise.resolve(pack.hooks![prop].call(hooks, arg)).then(ret => {\n                  return prevHook.call(hooks, ret);\n                });\n              }\n\n              const ret = pack.hooks![prop].call(hooks, arg);\n              return prevHook.call(hooks, ret);\n            };\n          } else {\n            hooks[prop] = (...args) => {\n              let ret = pack.hooks![prop].apply(hooks, args);\n              if (ret === false) {\n                ret = prevHook.apply(hooks, args);\n              }\n              return ret;\n            };\n          }\n        }\n        opts.hooks = hooks;\n      }\n\n      // ==-- Parse WalkTokens extensions --== //\n      if (pack.walkTokens) {\n        const walkTokens = this.defaults.walkTokens;\n        opts.walkTokens = function(token) {\n          let values: Array<Promise<void> | void> = [];\n          values.push(pack.walkTokens!.call(this, token));\n          if (walkTokens) {\n            values = values.concat(walkTokens.call(this, token));\n          }\n          return values;\n        };\n      }\n\n      this.defaults = { ...this.defaults, ...opts };\n    });\n\n    return this;\n  }\n\n  setOptions(opt) {\n    this.defaults = { ...this.defaults, ...opt };\n    return this;\n  }\n\n  #parseMarkdown(lexer: (src: string, options?: MarkedOptions) => TokensList | Token[], parser: (tokens: Token[], options?: MarkedOptions) => string | undefined) {\n    return (src: string, optOrCallback?: MarkedOptions | ResultCallback | undefined | null, callback?: ResultCallback | undefined): string | Promise<string | undefined> | undefined => {\n      if (typeof optOrCallback === 'function') {\n        callback = optOrCallback;\n        optOrCallback = null;\n      }\n\n      const origOpt = { ...optOrCallback };\n      const opt = { ...this.defaults, ...origOpt };\n      const throwError = this.#onError(!!opt.silent, !!opt.async, callback);\n\n      // throw error in case of non string input\n      if (typeof src === 'undefined' || src === null) {\n        return throwError(new Error('marked(): input parameter is undefined or null'));\n      }\n      if (typeof src !== 'string') {\n        return throwError(new Error('marked(): input parameter is of type '\n          + Object.prototype.toString.call(src) + ', string expected'));\n      }\n\n      checkDeprecations(opt, callback);\n\n      if (opt.hooks) {\n        opt.hooks.options = opt;\n      }\n\n      if (callback) {\n        const highlight = opt.highlight;\n        let tokens: TokensList | Token[];\n\n        try {\n          if (opt.hooks) {\n            src = opt.hooks.preprocess(src);\n          }\n          tokens = lexer(src, opt);\n        } catch (e) {\n          return throwError(e as Error);\n        }\n\n        const done = (err?: Error) => {\n          let out;\n\n          if (!err) {\n            try {\n              if (opt.walkTokens) {\n                this.walkTokens(tokens, opt.walkTokens);\n              }\n              out = parser(tokens, opt)!;\n              if (opt.hooks) {\n                out = opt.hooks.postprocess(out);\n              }\n            } catch (e) {\n              err = e as Error;\n            }\n          }\n\n          opt.highlight = highlight;\n\n          return err\n            ? throwError(err)\n            : callback!(null, out) as undefined;\n        };\n\n        if (!highlight || highlight.length < 3) {\n          return done();\n        }\n\n        delete opt.highlight;\n\n        if (!tokens.length) return done();\n\n        let pending = 0;\n        this.walkTokens(tokens, (token) => {\n          if (token.type === 'code') {\n            pending++;\n            setTimeout(() => {\n              highlight(token.text, token.lang, (err, code) => {\n                if (err) {\n                  return done(err);\n                }\n                if (code != null && code !== token.text) {\n                  token.text = code;\n                  token.escaped = true;\n                }\n\n                pending--;\n                if (pending === 0) {\n                  done();\n                }\n              });\n            }, 0);\n          }\n        });\n\n        if (pending === 0) {\n          done();\n        }\n\n        return;\n      }\n\n      if (opt.async) {\n        return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n          .then(src => lexer(src, opt))\n          .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n          .then(tokens => parser(tokens, opt))\n          .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n          .catch(throwError);\n      }\n\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src);\n        }\n        const tokens = lexer(src, opt);\n        if (opt.walkTokens) {\n          this.walkTokens(tokens, opt.walkTokens);\n        }\n        let html = parser(tokens, opt);\n        if (opt.hooks) {\n          html = opt.hooks.postprocess(html);\n        }\n        return html;\n      } catch (e) {\n        return throwError(e as Error);\n      }\n    };\n  }\n\n  #onError(silent: boolean, async: boolean, callback?: ResultCallback) {\n    return (e: Error): string | Promise<string> | undefined => {\n      e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n      if (silent) {\n        const msg = '<p>An error occurred:</p><pre>'\n          + escape(e.message + '', true)\n          + '</pre>';\n        if (async) {\n          return Promise.resolve(msg);\n        }\n        if (callback) {\n          callback(null, msg);\n          return;\n        }\n        return msg;\n      }\n\n      if (async) {\n        return Promise.reject(e);\n      }\n      if (callback) {\n        callback(e);\n        return;\n      }\n      throw e;\n    };\n  }\n}\n","import { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Slugger } from './Slugger.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { Marked } from './Instance.ts';\nimport {\n  _getDefaults,\n  changeDefaults,\n  _defaults\n} from './defaults.ts';\nimport type { MarkedExtension, MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, TokensList } from './Tokens.ts';\n\nexport type ResultCallback = (error: Error | null, parseResult?: string) => undefined | void;\n\nconst markedInstance = new Marked();\n\n/**\n * Compiles markdown to HTML asynchronously.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options, having async: true\n * @return Promise of string of compiled HTML\n */\nexport function marked(src: string, options: MarkedOptions & { async: true }): Promise<string>;\n\n/**\n * Compiles markdown to HTML synchronously.\n *\n * @param src String of markdown source to be compiled\n * @param options Optional hash of options\n * @return String of compiled HTML\n */\nexport function marked(src: string, options?: MarkedOptions): string;\n\n/**\n * Compiles markdown to HTML asynchronously with a callback.\n *\n * @param src String of markdown source to be compiled\n * @param callback Function called when the markdownString has been fully parsed when using async highlighting\n */\nexport function marked(src: string, callback: ResultCallback): void;\n\n/**\n * Compiles markdown to HTML asynchronously with a callback.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @param callback Function called when the markdownString has been fully parsed when using async highlighting\n */\nexport function marked(\n    src: string,\n    options: MarkedOptions,\n    callback: ResultCallback,\n): void;\nexport function marked(src: string, opt?: MarkedOptions | ResultCallback, callback?: ResultCallback): string | Promise<string | undefined> | undefined {\n  return markedInstance.parse(src, opt, callback);\n}\n\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\nmarked.setOptions = function(options: MarkedOptions) {\n  markedInstance.setOptions(options);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\n\nmarked.defaults = _defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args: MarkedExtension[]) {\n  markedInstance.use(...args);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function <T = void>(tokens: Token[] | TokensList, callback: (token: Token) => T | T[]) {\n  return markedInstance.walkTokens(tokens, callback);\n};\n\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Slugger = _Slugger;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\n\nexport const options = marked.options;\nexport const setOptions = marked.setOptions;\nexport const use = marked.use;\nexport const walkTokens = marked.walkTokens;\nexport const parseInline = marked.parseInline;\nexport const parse = marked;\nexport const parser = _Parser.parse;\nexport const lexer = _Lexer.lex;\nexport { _defaults as defaults, _getDefaults as getDefaults } from './defaults.ts';\nexport { _Lexer as Lexer } from './Lexer.ts';\nexport { _Parser as Parser } from './Parser.ts';\nexport { _Tokenizer as Tokenizer } from './Tokenizer.ts';\nexport { _Renderer as Renderer } from './Renderer.ts';\nexport { _TextRenderer as TextRenderer } from './TextRenderer.ts';\nexport { _Slugger as Slugger } from './Slugger.ts';\nexport { _Hooks as Hooks } from './Hooks.ts';\nexport { Marked } from './Instance.ts';\nexport type * from './MarkedOptions.ts';\nexport type * from './rules.ts';\nexport type * from './Tokens.ts';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}